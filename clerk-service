#!/usr/bin/env python3
import os
import sys
import logging
from flask import Flask, request, jsonify, send_from_directory
from mpd import MPDClient, MPDError, ConnectionError as MPDConnErr
import clerk_core as core
from toml import load as toml_load
from werkzeug.exceptions import UnsupportedMediaType


# ── Configuration ──────────────────────────────────────────────────────────────
PUBLIC_DIR = os.environ.get('CLERK_WEB_PUBLIC_DIR', "/usr/share/clerk-web")
APP_PORT = int(os.environ.get('CLERK_WEB_PORT', 5000))
APP_HOST = os.environ.get('CLERK_WEB_HOST', '0.0.0.0')
conf_path = os.path.join(
    os.environ.get('XDG_CONFIG_HOME', os.path.join(os.environ.get('HOME'),'.config')),
    'clerk', 'clerk-core.conf'
)
if not os.path.exists(conf_path):
    core.create_core_config()
core_config = toml_load(conf_path)
mpd_host   = os.environ.get('MPD_HOST', core_config['general']['mpd_host'])

# ── Logging Setup ──────────────────────────────────────────────────────────────
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("clerk-web")

# ── MPD Client Setup ───────────────────────────────────────────────────────────
mpd = MPDClient()

def connect_mpd():
    """Ensure mpd client stays connected, reconnecting if ping fails."""
    try:
        mpd.ping()
    except (MPDError, MPDConnErr):
        # Safe disconnect
        try: mpd.close()
        except: pass
        try: mpd.disconnect()
        except: pass
        # Reconnect
        mpd.connect(mpd_host, 6600)
        mpd.ping()

# Initial connect
try:
    mpd.connect(mpd_host, 6600)
    mpd.ping()
except Exception as e:
    logger.critical(f"Cannot connect to MPD at {mpd_host}:6600: {e}")
    sys.exit(1)

# ── Ensure caches exist and load ratings ────────────────────────────────────────
if not core.check_update(mpd):
    logger.critical("Core cache initialization failed")
    sys.exit(1)
core.load_ratings_cache()

# ── Flask App Initialization ──────────────────────────────────────────────────
app = Flask(
    __name__,
    static_folder=PUBLIC_DIR,
    static_url_path=''
)

# ── Static File Routes ─────────────────────────────────────────────────────────
@app.route('/')
def index():
    return send_from_directory(PUBLIC_DIR, 'index.html')

@app.route('/<path:filename>')
def public_asset(filename):
    return send_from_directory(PUBLIC_DIR, filename)

# ── API Endpoints ──────────────────────────────────────────────────────────────

@app.route('/api/v1/albums', methods=['GET'])
def list_albums():
    albums = core.read_album_cache("album")
    core.load_ratings_cache()
    out = []
    for a in albums:
        entry = a.copy()
        entry['rating'] = core.album_ratings.get(core.get_album_key(a))
        out.append(entry)
    return jsonify(out), 200

@app.route('/api/v1/latest_albums', methods=['GET']) # New Endpoint for latest albums
def list_latest_albums():
    albums = core.read_album_cache("latest")
    core.load_ratings_cache()
    out = []
    for a in albums:
        entry = a.copy()
        entry['rating'] = core.album_ratings.get(core.get_album_key(a))
        out.append(entry)
    return jsonify(out), 200

@app.route('/api/v1/tracks', methods=['GET'])
def list_tracks():
    tracks = core.read_tracks_cache()
    return jsonify(tracks), 200

@app.route('/api/v1/albums/<album_id>/rating', methods=['GET'])
def get_album_rating(album_id):
    albums = core.read_album_cache("album")
    a = next((x for x in albums if x['id']==album_id), None)
    if not a:
        return jsonify({"error":"Album not found"}), 404
    core.load_ratings_cache()
    return jsonify({
        "album_id": album_id,
        "rating": core.album_ratings.get(core.get_album_key(a))
    }), 200

@app.route('/api/v1/albums/<album_id>/rating', methods=['POST'])
def set_album_rating(album_id):
    data = request.get_json() or {}
    val  = str(data.get('rating','---'))
    if val not in [str(i) for i in range(1,11)] + ['Delete','---']:
        return jsonify({"error":"Invalid rating"}), 400
    albums = core.read_album_cache("album")
    a = next((x for x in albums if x['id']==album_id), None)
    if not a:
        return jsonify({"error":"Album not found"}), 404
    changed = core.update_album_rating(a, val)
    return jsonify({"changed": changed}), 200

@app.route('/api/v1/tracks/<track_id>/rating', methods=['POST'])
def set_track_rating(track_id):
    """
    Sets or updates the rating for a specific track by its unique track_id using MPD stickers.
    """
    data = request.get_json() or {}
    val = str(data.get('rating', '---'))

    if val not in [str(i) for i in range(1, 11)] + ['Delete', '---']:
        logger.warning(f"Invalid rating value '{val}' received for track rating.")
        return jsonify({"error": "Invalid rating. Must be '1'-'10', '---', or 'Delete'."}), 400

    tracks = core.read_tracks_cache()
    t = next((x for x in tracks if x['id'] == track_id), None)
    if not t:
        logger.warning(f"Track with ID '{track_id}' not found in cache.")
        return jsonify({"error": "Track not found"}), 404

    # Ensure the track data has the 'file' key, which is essential for MPD sticker operations
    track_file = t.get('file')
    if not track_file:
        logger.error(f"Track data for ID '{track_id}' is missing the 'file' key. Cannot set sticker rating.")
        return jsonify({"error": "Track data incomplete (missing 'file' path)."}), 422 # Unprocessable Entity

    connect_mpd() # Ensure MPD is connected

    try:
        changed = core.update_track_rating(mpd, t, val)
        if changed:
            logger.info(f"Track '{t.get('title', 'N/A')}' (ID: {track_id}) rating updated to {val}.")
            return jsonify({"changed": True, "message": f"Track rating updated to {val}"}), 200
        else:
            logger.info(f"Track '{t.get('title', 'N/A')}' (ID: {track_id}) rating not changed (value was already {val} or '---').")
            return jsonify({"changed": False, "message": "Rating not changed"}), 200
    except Exception as e:
        logger.error(f"Failed to set track rating for ID '{track_id}': {str(e)}", exc_info=True)
        return jsonify({"error": f"Failed to set track rating: {str(e)}"}), 500


@app.route('/api/v1/playlist/add/album/<album_id>', methods=['POST'])
def add_album_to_playlist(album_id):
    data = request.get_json() or {}
    # Get the mode from the request payload. Default to 'album' for safety/consistency.
    mode_from_request = data.get('list_mode', 'album') # Renamed to avoid conflict with playlist 'mode'

    if mode_from_request not in ['album', 'latest']:
        return jsonify({"error":"Invalid list mode for album lookup"}), 400

    if data.get('mode') not in ['add','insert','replace']:
        return jsonify({"error":"Invalid playlist mode"}), 400
    
    playlist_mode = data.get('mode', 'add')

    # Read from the correct cache based on the received 'list_mode'
    albums = core.read_album_cache(mode_from_request) # <<< CHANGED HERE!

    a = next((x for x in albums if x['id']==album_id), None)
    if not a:
        return jsonify({"error":"Album not found"}), 404
    
    connect_mpd()
    
    try:
        core.add_album_to_playlist(mpd, [a], playlist_mode)
        return jsonify({"message": "Album added to playlist successfully."}), 200
    except Exception as e:
        return jsonify({"error": f"Failed to add album to playlist: {str(e)}"}), 500


@app.route('/api/v1/playlist/add/track/<track_id>', methods=['POST'])
def add_track_to_playlist(track_id):
    data = request.get_json() or {}
    mode = data.get('mode', 'add') # Default to 'add' if not specified

    if mode not in ['add', 'insert', 'replace']:
        logger.warning(f"Invalid mode '{mode}' received for track addition.")
        return jsonify({"error": "Invalid mode. Must be 'add', 'insert', or 'replace'."}), 400

    tracks = core.read_tracks_cache()
    t = next((x for x in tracks if x['id'] == track_id), None)
    if not t:
        logger.warning(f"Track with ID '{track_id}' not found in cache.")
        return jsonify({"error": "Track not found"}), 404

    connect_mpd() # Ensure MPD is connected

    try:
        # Pass the dynamic mode to the core function
        core.add_track_to_playlist(mpd, [t], mode=mode)
        logger.info(f"Track '{t.get('title', 'N/A')}' (ID: {track_id}) added to playlist in mode: {mode}.")
        return jsonify({"message": f"Track added to playlist successfully in '{mode}' mode."}), 200
    except Exception as e:
        logger.error(f"Failed to add track '{t.get('title', 'N/A')}' (ID: {track_id}) to playlist: {str(e)}", exc_info=True)
        return jsonify({"error": f"Failed to add track to playlist: {str(e)}"}), 500


@app.route('/api/v1/playback/random/album', methods=['POST'])
def play_random_album():
    connect_mpd()
    result = core.random_album(mpd)
    if isinstance(result, tuple):
        body, status = result
        return jsonify(body), status
    return jsonify(result), 200

@app.route('/api/v1/playback/random/tracks', methods=['POST'])
def play_random_tracks():
    connect_mpd()
    result = core.random_tracks(mpd)
    if isinstance(result, tuple):
        body, status = result
        return jsonify(body), status
    return jsonify(result), 200

@app.route('/api/v1/cache/update', methods=['POST'])
def cache_update():
    connect_mpd()
    ok = core.create_cache(mpd)
    return (jsonify({"message":"Cache updated"}), 200) if ok \
           else (jsonify({"error":"Cache update failed"}), 500)

@app.route('/api/v1/current_album/rating', methods=['GET'])
def get_current_album_rating():
    try:
        connect_mpd()
        song = mpd.currentsong()
        if not song:
            return jsonify({"error":"No song playing"}), 404
        ad = {
            'albumartist': song.get('albumartist', song.get('artist')),
            'album':       song.get('album'),
            'date':        song.get('date','0000')
        }
        core.load_ratings_cache()
        return jsonify({"rating": core.album_ratings.get(core.get_album_key(ad))}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/v1/current_track/rating', methods=['GET']) # New endpoint for current track rating
def get_current_track_rating():
    """
    Retrieves the MPD sticker rating for the currently playing track.
    """
    try:
        connect_mpd()
        song = mpd.currentsong()
        if not song:
            return jsonify({"error": "No song playing"}), 404

        track_file = song.get('file')
        if not track_file:
            logger.error(f"Current song is missing 'file' key: {song}")
            return jsonify({"error": "Current track data incomplete (missing 'file' path)."}), 422 # Unprocessable Entity

        try:
            # sticker_get returns a dict like {'sticker': 'rating_value'}
            sticker = mpd.sticker_get('song', track_file, 'rating')
            rating = sticker.get('rating') # Extract the 'rating' value
            return jsonify({"rating": rating}), 200
        except MPDError as e:
            # MPDError can occur if no sticker exists, or other MPD issues
            if "No such sticker" in str(e): # Specific error for non-existent sticker
                return jsonify({"rating": None, "message": "No rating sticker found for this track."}), 200
            else:
                logger.error(f"MPD error getting sticker for current track: {e}", exc_info=True)
                return jsonify({"error": f"MPD error getting track rating: {str(e)}"}), 500
        except Exception as e:
            logger.error(f"Unexpected error getting sticker for current track: {e}", exc_info=True)
            return jsonify({"error": f"Failed to get current track rating: {str(e)}"}), 500
    except Exception as e:
        logger.error(f"Error connecting to MPD or getting current song for track rating: {e}", exc_info=True)
        return jsonify({"error": str(e)}), 500


@app.route('/api/v1//current_album/rating', methods=['POST'])
def set_current_album_rating():
    logger.info(f"Received POST request to /current_album/rating from {request.remote_addr}")
    logger.info(f"Request Headers: {request.headers}")
    content_type = request.headers.get('Content-Type')
    logger.info(f"Content-Type header received: {content_type}")

    data = {} # Initialize data to an empty dict
    try:
        # Attempt to get JSON data. Flask will raise UnsupportedMediaType if Content-Type is wrong.
        # We don't use 'or {}' here directly after get_json() because we want to catch the exception.
        if request.is_json: # Check if Flask thinks it's JSON based on Content-Type
            data = request.get_json()
            logger.info(f"Successfully parsed JSON data: {data}")
        else:
            # This block will be hit if request.is_json is False, even if get_json() might still work with force=True
            # But since we're not using force=True, if is_json is False, get_json() would likely fail or return None.
            logger.warning(f"Request is not identified as JSON by Flask (request.is_json is False). Content-Type: {content_type}")
            # If the rating is changing, this is the most suspicious path.
            # It implies that the Content-Type is NOT 'application/json' for the request
            # coming from HTTP Shortcuts, but perhaps another client is sending a correct one.
            return jsonify({"error": "Request Content-Type is not 'application/json'"}), 415

    except UnsupportedMediaType as e:
        logger.error(f"Unsupported Media Type error during JSON parsing: {e}. Content-Type: {content_type}")
        return jsonify({"error": "Unsupported Media Type. Did not attempt to load JSON data because the request Content-Type was not 'application/json'."}), 415
    except Exception as e:
        logger.error(f"Error parsing JSON: {e}")
        return jsonify({"error": f"Error parsing request body: {str(e)}"}), 400

    val = str(data.get('rating', '---'))
    logger.info(f"Extracted rating value: {val}")

    if val not in [str(i) for i in range(1, 11)] + ['Delete', '---']:
        logger.warning(f"Invalid rating value received: {val}")
        return jsonify({"error": "Invalid rating"}), 400

    try:
        connect_mpd()
        song = mpd.currentsong()
        if not song:
            logger.warning("No song playing, cannot set rating.")
            return jsonify({"error": "No song playing"}), 404
        ad = {
            'albumartist': song.get('albumartist', song.get('artist')),
            'album':        song.get('album'),
            'date':         song.get('date', '0000')
        }
        logger.info(f"Attempting to update rating for album: {ad['album']} by {ad['albumartist']}")
        changed = core.update_album_rating(ad, val)
        logger.info(f"Album rating update result: changed={changed}")
        return jsonify({"changed": changed}), 200 # This is the SUCCESS path
    except Exception as e:
        logger.error(f"Error during MPD or core update: {e}", exc_info=True)
        return jsonify({"error": str(e)}), 500

@app.route('/api/v1/current_track/rating', methods=['POST']) # New endpoint for current track rating
def set_current_track_rating():
    """
    Sets or updates the MPD sticker rating for the currently playing track.
    """
    data = request.get_json() or {}
    val = str(data.get('rating', '---'))

    if val not in [str(i) for i in range(1, 11)] + ['Delete', '---']:
        logger.warning(f"Invalid rating value '{val}' received for current track rating.")
        return jsonify({"error": "Invalid rating. Must be '1'-'10', '---', or 'Delete'."}), 400

    try:
        connect_mpd()
        song = mpd.currentsong()
        if not song:
            logger.warning("No song playing, cannot set current track rating.")
            return jsonify({"error": "No song playing"}), 404

        track_data = {
            'file': song.get('file'),
            'title': song.get('title'),
            'artist': song.get('artist')
        }
        
        # Ensure track_data includes 'file' which is crucial for sticker operations
        if not track_data.get('file'):
            logger.error(f"Current song is missing 'file' key: {song}. Cannot set sticker rating.")
            return jsonify({"error": "Current track data incomplete (missing 'file' path)."}), 422 # Unprocessable Entity

        logger.info(f"Attempting to update rating for current track: {track_data.get('title', 'N/A')}")
        changed = core.update_track_rating(mpd, track_data, val)

        if changed:
            logger.info(f"Current track rating updated to {val}.")
            return jsonify({"changed": True, "message": f"Current track rating updated to {val}"}), 200
        else:
            logger.info(f"Current track rating not changed (value was already {val} or '---').")
            return jsonify({"changed": False, "message": "Rating not changed"}), 200

    except Exception as e:
        logger.error(f"Error during MPD or core update for current track rating: {e}", exc_info=True)
        return jsonify({"error": str(e)}), 500


# ── Run Application ────────────────────────────────────────────────────────────
if __name__ == '__main__':
    app.run(host=APP_HOST, port=APP_PORT)

